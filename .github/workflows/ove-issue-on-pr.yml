name: Move issue item (Projects v2) on PR creation

on:
  pull_request:
    types: [opened]

jobs:
  move_issue_to_column:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Move issue in new Projects
        uses: actions/github-script@v6
        with:
          script: |
            // Configurações ajustáveis
            const config = {
              projectTitle: "Projeto teste workflow", // Tente também variações como "Teste Workflow"
              statusFieldName: "Status",
              desiredOptionName: "In Review",
              partialMatch: true // Se true, busca por projetos que CONTÊM o nome
            }

            // 1) Capturar o corpo do PR
            const prBody = context.payload.pull_request.body || ""
            const match = prBody.match(/\b(?:close|closes|fix|fixes|resolve|resolves)\s+#(\d+)/i)
            if (!match) {
              console.log("Nenhuma issue vinculada encontrada no corpo do PR.")
              return
            }
            const issueNumber = match[1]

            // 2) Listar todos projetos
            const listQuery = `
              query {
                viewer {
                  projectsV2(first: 20) {
                    nodes {
                      number
                      title
                      id
                      url
                    }
                  }
                }
              }
            `

            const listResult = await github.graphql(listQuery)
            const projects = listResult.viewer.projectsV2.nodes
            
            // 3) Encontrar projeto (com busca flexível)
            const targetProject = config.partialMatch 
              ? projects.find(p => p.title.toLowerCase().includes(config.projectTitle.toLowerCase()))
              : projects.find(p => p.title === config.projectTitle)
            
            if (!targetProject) {
              console.log(`Projeto "${config.projectTitle}" não encontrado. Projetos disponíveis:`)
              projects.forEach(p => console.log(`- "${p.title}" (Nº ${p.number}) - ${p.url}`))
              return
            }

            console.log(`Usando projeto: "${targetProject.title}" (ID: ${targetProject.id})`)

            // 4) Obter detalhes do projeto
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `

            const result = await github.graphql(query, { projectId: targetProject.id })
            const projectV2 = result.node

            // 5) Encontrar a issue no projeto
            const projectItem = projectV2.items.nodes.find(item => 
              item.content?.number == issueNumber
            )

            if (!projectItem) {
              console.log(`Issue #${issueNumber} não encontrada no projeto. Verifique se está adicionada.`)
              return
            }

            // 6) Encontrar o campo de status
            const statusField = projectV2.fields.nodes.find(f => 
              f.name.toLowerCase() === config.statusFieldName.toLowerCase()
            )
            
            if (!statusField) {
              console.log(`Campo "${config.statusFieldName}" não encontrado. Campos disponíveis:`)
              projectV2.fields.nodes.forEach(f => console.log(`- ${f.name}`))
              return
            }

            // 7) Encontrar a opção desejada
            const desiredOption = statusField.options.find(opt => 
              opt.name.toLowerCase() === config.desiredOptionName.toLowerCase()
            )
            
            if (!desiredOption) {
              console.log(`Opção "${config.desiredOptionName}" não encontrada. Opções disponíveis:`)
              statusField.options.forEach(o => console.log(`- ${o.name}`))
              return
            }

            // 8) Atualizar o status
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `

            await github.graphql(mutation, {
              projectId: projectV2.id,
              itemId: projectItem.id,
              fieldId: statusField.id,
              optionId: desiredOption.id
            })

            console.log(`✅ Issue #${issueNumber} movida para "${desiredOption.name}" no projeto "${targetProject.title}"`)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
