name: Move issue item (Projects v2) on PR creation

on:
  pull_request:
    types: [opened]

jobs:
  move_issue_to_column:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Move issue in new Projects
        uses: actions/github-script@v6
        with:
          script: |
            // 1) Capturar o corpo do Pull Request
            const prBody = context.payload.pull_request.body || ""

            // 2) Procurar referência de issue
            const match = prBody.match(/\b(?:close|closes|fix|fixes|resolve|resolves)\s+#(\d+)/i)
            if (!match) {
              console.log("Nenhuma referência de fechamento de issue encontrada.")
              return
            }
            const issueNumber = match[1]

            // 3) Configurações
            const userLogin = "GabrielS-Nogueira"
            const projectTitle = "Projeto teste workflow" // Nome do seu projeto
            const statusFieldName = "Status"
            const desiredOptionName = "In Review"

            // 4) Primeiro listar todos projetos para encontrar o correto
            const listQuery = `
              query($user: String!) {
                user(login: $user) {
                  projectsV2(first: 20) {
                    nodes {
                      number
                      title
                      id
                    }
                  }
                }
              }
            `

            const listResult = await github.graphql(listQuery, { user: userLogin })
            const projects = listResult.user.projectsV2.nodes
            
            // Encontrar projeto pelo título (mais confiável que número)
            const targetProject = projects.find(p => p.title === projectTitle)
            
            if (!targetProject) {
              console.log(`Projeto "${projectTitle}" não encontrado. Projetos disponíveis:`)
              console.log(projects.map(p => `- ${p.title} (#${p.number})`).join('\n'))
              return
            }

            console.log(`Encontrado projeto: ${targetProject.title} (ID: ${targetProject.id})`)

            // 5) Query para obter detalhes do projeto específico
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          __typename
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `

            const result = await github.graphql(query, { projectId: targetProject.id })
            const projectV2 = result.node

            // Restante do código...
            const projectItem = projectV2.items.nodes.find(item => {
              if (item.content?.__typename === "Issue") {
                return item.content.number == issueNumber
              }
              return false
            })

            if (!projectItem) {
              console.log(`Item para issue #${issueNumber} não encontrado no projeto.`)
              return
            }

            const statusField = projectV2.fields.nodes.find(f => f.name === statusFieldName)
            if (!statusField) {
              console.log(`Campo "${statusFieldName}" não encontrado. Campos disponíveis:`)
              console.log(projectV2.fields.nodes.map(f => f.name).join(', '))
              return
            }

            const desiredOption = statusField.options.find(opt => opt.name === desiredOptionName)
            if (!desiredOption) {
              console.log(`Opção "${desiredOptionName}" não encontrada. Opções disponíveis:`)
              console.log(statusField.options.map(o => o.name).join(', '))
              return
            }

            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `

            await github.graphql(mutation, {
              projectId: projectV2.id,
              itemId: projectItem.id,
              fieldId: statusField.id,
              optionId: desiredOption.id
            })

            console.log(`Issue #${issueNumber} movida para "${desiredOptionName}" com sucesso!`)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
