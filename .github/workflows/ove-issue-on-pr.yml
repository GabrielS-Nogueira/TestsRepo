name: Move issue item (Projects v2) on PR creation

on:
  pull_request:
    types: [opened]

jobs:
  move_issue_to_column:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Move issue in new Projects
        uses: actions/github-script@v6
        with:
          script: |
            // 1) Capturar o corpo do Pull Request
            const prBody = context.payload.pull_request.body || ""

            // 2) Procurar se há algo tipo "Close #10", "Closes #10", "Fixes #20", etc.
            const match = prBody.match(/\b(?:close|closes|fix|fixes|resolve|resolves)\s+#(\d+)/i)
            if (!match) {
              console.log("Nenhuma referência de fechamento de issue foi encontrada no corpo do PR.")
              return
            }
            const issueNumber = match[1]

            // 3) Configurações
            const orgLogin = "GabrielS-Nogueira"
            const projectNumber = 1
            const statusFieldName = "Status"
            const desiredOptionName = "In Review"

            // 4) Query GraphQL para obter informações do projeto
            const query = `
              query($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 100, orderBy: {field: CREATED_AT, direction: DESC}) {
                      nodes {
                        id
                        content {
                          __typename
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `

            const result = await github.graphql(query, {
              org: orgLogin,
              projectNumber: projectNumber
            })

            // 5) Extrair dados do JSON
            const projectV2 = result.organization.projectV2
            if (!projectV2) {
              console.log(`Projeto #${projectNumber} não encontrado na org ${orgLogin}.`)
              return
            }

            // Achar o item que corresponde à issue #X
            const projectItem = projectV2.items.nodes.find(item => {
              if (item.content?.__typename === "Issue") {
                return item.content.number == issueNumber
              }
              return false
            })

            if (!projectItem) {
              console.log(`Não foi encontrado um item no projeto para a issue #${issueNumber}.`)
              return
            }

            const itemId = projectItem.id

            // Achar o campo 'Status'
            const statusField = projectV2.fields.nodes.find(f => f.name === statusFieldName)
            if (!statusField) {
              console.log(`Campo "${statusFieldName}" não encontrado no projeto.`)
              return
            }
            const statusFieldId = statusField.id

            // Achar a opção desejada
            const desiredOption = statusField.options.find(opt => opt.name === desiredOptionName)
            if (!desiredOption) {
              console.log(`Opção "${desiredOptionName}" não existe no campo "${statusFieldName}".`)
              return
            }
            const desiredOptionId = desiredOption.id

            // 6) Mutation GraphQL para atualizar o valor do campo
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `

            await github.graphql(mutation, {
              projectId: projectV2.id,
              itemId: itemId,
              fieldId: statusFieldId,
              optionId: desiredOptionId
            })

            console.log(`Issue #${issueNumber} atualizada para "${desiredOptionName}" no projeto!`)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
